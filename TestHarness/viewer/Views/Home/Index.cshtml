@{
    ViewData["Title"] = "Azure Event Grid Viewer";
}

<div>
    <p style="float: left; font-size: 24px;" class="lead">
        <img src="~/images/eventgrid.png" height="47" width="90" alt="Azure Event Grid" />
        <strong>Fenetre Servicing Shell Test Harness</strong>
    </p>
    <p style="float: right;">
        <button class="btn btn-primary btn-xs" id="clear-events">
            <span class="glyphicon glyphicon-trash"></span>
        </button>
    </p>
    <div style="clear: both; font-size: 12px;" class="lead">
        <ul>
            <li>This is a throw-away application just to pretend it's the Servcing Shell</li>
            <li>It contains one Web API method Post(TaskStatusEvent taskStatusEvent) which is the Handler for an incoming TaskStatusEvent</li>
            <li>The caller is a separate Azure Service Bus Subscriber application</li>
        </ul>
    </div>
</div>
<div style="clear: both;"></div>
<hr /><br /><br />

<table id="grid-events" class="table table-striped">
    <thead>
        <th>&nbsp;</th>
        <th>Task ID</th>
        <th>Status</th>
        <th>Changed By</th>
        <th>Changed On</th>
    </thead>
    <tbody id="grid-event-details"></tbody>
</table>

<script id="event-template" type="text/x-handlebars-template">
    <tr data-toggle="collapse" data-target="#event-{{gridSequenceNumber}}" class="accordian-toggle">
        <td>
            <button class="btn btn-primary btn-xs">
                <span class="glyphicon glyphicon-eye-open"></span>
            </button>
        </td>
        <td>{{gridEventId}}</td>
        <td>{{gridEventStatus}}</td>
        <td>{{gridEventChangedBy}}</td>
        <td>{{gridEventChangedOn}}</td>
    </tr>
    <tr class="hiddenRow collapse" id="event-{{gridSequenceNumber}}">
        <td colspan="12">
            <div class="accordian-body">
                <pre><code class="nohighlight">{{gridEvent}}</code></pre>
            </div>
        </td>
    </tr>
</script>

@section scripts {
    <script src="~/lib/signalr.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0/handlebars.js"></script>

    <script type="text/javascript">

        var hubConnection;

        var clear = function () {
            $("#grid-events").find("tr:gt(0)").remove();
            $("#grid-events").hide();
        }

        var addEvent = function (sequenceNumber, id, status, changedBy, changedOn, data) {
            var context = {
                gridSequenceNumber: sequenceNumber,
                gridEventId: id,
                gridEventStatus: status,
                gridEventChangedBy: changedBy,
                gridEventChangedOn: changedOn,
                gridEvent: data
            };
            var source = document.getElementById('event-template').innerHTML;
            var template = Handlebars.compile(source);
            var html = template(context);

            $("#grid-events").show();
            $('#grid-event-details').prepend(html);
        }

        var initialize = function () {
            $("#grid-events").hide();
            var clearEvents = document.getElementById('clear-events');
            clearEvents.addEventListener('click', function () {
                clear();
            });

            hubConnection = new signalR.HubConnectionBuilder()
                .withUrl("hubs/gridevents")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            hubConnection.start().catch(err => console.error(err.toString()));
            hubConnection.on('gridupdate', function (sequenceNumber, id, status, changedBy, changedOn, data) {
                addEvent(sequenceNumber, id, status, changedBy, changedOn, data);
            });
        };

        $(document).ready(function () {
            initialize();
        });

    </script>

}